<?php
/**
 * @file
 * Test class for MongoDB_watchdog.
 */

/**
 * Test the behaviour of watchdog() mongodb_watchdog, not dblog
 */
class MongoDBLogTestCase extends DrupalWebTestCase {
  /**
   * Name of the test helper module invoking watchdog for test.
   */
  const MODULE = 'watchdog_test';

  /**
   * The name of the variable holding the system watchdog limit level.
   *
   * @var string
   */
  const LIMIT_VARIABLE = 'watchdog_limit';

  /**
   * Override the default "standard" profile for this test, we need to include
   * a test-specific module, which should not be present on a standard install.
   *
   * @var string
   */
  protected $profile = 'testing';

  /**
   * An administrator-type user account
   *
   * @var stdClass
   */
  protected $big_user;

  /**
   * A basic authenticated user account
   *
   * @var stdClass
   */
  protected $any_user;

  /**
   * The current MongoDB collection.
   *
   * @var MongoCollection
   */
  protected $collection;

  /**
   * The current test group.
   *
   * @var string
   */
  protected $group = 'Before setUp()';

  // Drupal 6 does not have REQUEST_TIME, use a custom value to minimize D6/D7 differences
  protected $request_time;

  public static function getInfo() {
    return array(
      'name' => 'MongoDB log functionality',
      'description' => 'Generate events and verify watchdog entries; verify user access to log reports based on persmissions.',
      'group' => 'MongoDB',
    );
  }

  /**
   * Enable modules and create users with specific permissions.
   */
  function setUp() {
    $this->group = t('Setup');
    parent::setUp('mongodb', 'mongodb_watchdog', 'blog', 'poll');

    // Create users.
    $this->big_user = $this->drupalCreateUser(array('administer site configuration', 'access administration pages', 'access site reports', 'administer users'));
    $this->any_user = $this->drupalCreateUser(array('access content'));

    $this->request_time = REQUEST_TIME;

    try {
      $this->collection = mongodb_collection(variable_get('mongodb_watchdog', 'watchdog'));
    }
    catch (Exception $e) {
      $this->collection = NULL;
    }
    $this->assertNotNull($this->collection, t('Access MongoDB watchdog collection'), $this->group);
  }

  /**
   * Clear the MongoDB data: simpletest only clears the main SQL database.
   *
   * (non-PHPdoc)
   * @see DrupalWebTestCase::tearDown()
   */
  function tearDown() {
    $this->group = t('Teardown');
    $this->pass('Clear watchdog collections', $this->group);
    module_load_include('inc', 'mongodb_watchdog', 'mongodb_watchdog.admin');
    mongodb_watchdog_clear_log_submit();

    parent::tearDown();
  }

  /**
   * Simplified query to look for a logged message.
   *
   * @param string $message
   *
   * @return string|NULL
   */
  protected function find($message) {
    $ret = $this->collection->findOne(array('message' => $message));
    return $ret;
  }

  /**
   * Assert that a given entry is present in the watchdog.
   *
   * @param string $message
   *
   * @return void
   */
  function assertEntry($message) {
    $logged = $this->find($message);
    $this->assertNotNull($logged, t('Event %message is logged', array('%message' => $message)), $this->group);
    $this->assertTrue(isset($logged['message']) && $logged['message'] == $message, t('Logged message is unchanged'), $this->group);
  }

  /**
   * Assert that a given entry is not present in the watchdog.
   *
   * @param string $message
   *
   * @return void
   */
  function assertNoEntry($message) {
    $logged = $this->find($message);
    $this->assertNull($logged, t('Event %message is not logged', array('%message' => $message)), $this->group);
  }

  /**
   * Ensure collection availability and inform on behalf of caller if if does not.
   *
  * @return boolean
   */
  protected function checkCollection() {
    if (!empty($this->collection)) {
      return TRUE;
    }
    $stack = debug_backtrace();
    $method = $stack[1]['function'];
    if (strtolower(substr($method, 0, 4)) == 'test') {
      $this->pass(t('%test test skipped: no collection.', array(
        '%test' => substr($method, 4),
      )), $this->group);
    }
    return FALSE;
  }

  /**
   * Test the default and non-default mongodb_watchdog insertion behaviours.
   *
   * Make sure the module applies the watchdog_limit variable,
   */
  function testWatchdogLimit() {

    // Bypass test if testing system does not have a MongoDB connection
    if (!$this->checkCollection()) {
      return;
    };

    // Default limit should be WATCHDOG_DEBUG
    $this->group = t('Defaults');
    $this->assertEqual(variable_get(self::LIMIT_VARIABLE, WATCHDOG_DEBUG), WATCHDOG_DEBUG,
      t('%name defaults to WATCHDOG_DEBUG', array('%name' => self::LIMIT_VARIABLE)),
      $this->group);

    // Test at this default level
    $message = $this->randomString(32);
    $this->pass(t('Logging %message', array('%message' => $message)), $this->group);
    watchdog(self::MODULE, $message, array(), WATCHDOG_DEBUG);
    $this->assertEntry($message);

    // Now request a higher level: unimportant events should be ignored...
    $this->group = t('Ignoring');
    variable_set(self::LIMIT_VARIABLE, WATCHDOG_NOTICE);
    $message = $this->randomString(32);
    $this->pass(t('Logging %message', array('%message' => $message)), $this->group);
    watchdog(self::MODULE, $message, array(), WATCHDOG_DEBUG);
    $this->assertNoEntry($message);

    // ... but events at the limit or more important should be logged
    $this->group = t('Logging');
    $message = $this->randomString(32);
    $this->pass(t('Logging %message', array('%message' => $message)), $this->group);
    watchdog(self::MODULE, $message, array(), WATCHDOG_NOTICE);
    $this->assertEntry($message);

    $message = $this->randomString(32);
    $this->pass(t('Logging %message', array('%message' => $message)), $this->group);
    watchdog(self::MODULE, $message, array(), WATCHDOG_ERROR);
    $this->assertEntry($message);
  }

  // @FIXME Below this line is older broken code inherited from dblog tests

  /**
   * Login users, create dblog events, and test dblog functionality through the admin and user interfaces.
   */
  function ZtestDBLog() {
    // Login the admin user.
    $this->drupalLogin($this->big_user);

    // No implementation
    // $row_limit = 100;
    // $this->verifyRowLimit($row_limit);

    // No implementation
    // $this->verifyCron($row_limit);

    $this->verifyEvents();
    $this->verifyReports();

    // Login the regular user.
    $this->drupalLogin($this->any_user);
    $this->verifyReports(403);
  }

  /**
   * Generate dblog entries.
   *
   * @param integer $count
   *   Number of log entries to generate.
   * @param $type
   *   The type of watchdog entry.
   * @param $severity
   *   The severity of the watchdog entry.
   */
  private function generateLogEntries($count, $type = 'custom', $severity = WATCHDOG_NOTICE) {
    global $base_root;

    // Prepare the fields to be logged
    $log = array(
      'type'        => $type,
      'message'     => 'Log entry added to test the dblog row limit.',
      'variables'   => array(),
      'severity'    => $severity,
      'link'        => NULL,
      'user'        => $this->big_user,
      'request_uri' => $base_root . request_uri(),
      'referer'     => $_SERVER['HTTP_REFERER'],
      'ip'          => ip_address(),
      'timestamp'   => $this->request_time,
      );
    $message = 'Log entry added to test the dblog row limit.';
    for ($i = 0; $i < $count; $i++) {
      $log['message'] = $this->randomString();
      dblog_watchdog($log);
    }
  }

  /**
   * Verify the logged in user has the desired access to the various dblog nodes.
   *
   * @param integer $response HTTP response code.
   */
  private function verifyReports($response = 200) {
    $quote = '&#039;';

    // View dblog help node.
    $this->drupalGet('admin/help/dblog');
    $this->assertResponse($response);
    if ($response == 200) {
      $this->assertText(t('Database logging'), t('DBLog help was displayed'));
    }

    // View dblog report node.
    $this->drupalGet('admin/reports/dblog');
    $this->assertResponse($response);
    if ($response == 200) {
      $this->assertText(t('Recent log entries'), t('DBLog report was displayed'));
    }

    // View dblog page-not-found report node.
    $this->drupalGet('admin/reports/page-not-found');
    $this->assertResponse($response);
    if ($response == 200) {
      $this->assertText(t('Top ' . $quote . 'page not found' . $quote . ' errors'), t('DBLog page-not-found report was displayed'));
    }

    // View dblog access-denied report node.
    $this->drupalGet('admin/reports/access-denied');
    $this->assertResponse($response);
    if ($response == 200) {
      $this->assertText(t('Top ' . $quote . 'access denied' . $quote . ' errors'), t('DBLog access-denied report was displayed'));
    }

    // View dblog event node.
    $this->drupalGet('admin/reports/event/1');
    $this->assertResponse($response);
    if ($response == 200) {
      $this->assertText(t('Details'), t('DBLog event node was displayed'));
    }
  }

  /**
   * Verify events.
   */
  private function verifyEvents() {
    // Invoke events.
    $this->doUser();
    $this->doNode('article');
    $this->doNode('blog');
    $this->doNode('page');
    $this->doNode('poll');

    // When a user account is canceled, any content they created remains but the
    // uid = 0. Their blog entry shows as "'s blog" on the home page. Records
    // in the watchdog table related to that user have the uid set to zero.
  }

  /**
   * Generate and verify user events.
   *
   */
  private function doUser() {
    // Set user variables.
    $name = $this->randomName();
    $pass = user_password();
    // Add user using form to generate add user event (which is not triggered by drupalCreateUser).
    $edit = array();
    $edit['name'] = $name;
    $edit['mail'] = $name . '@example.com';
    $edit['pass[pass1]'] = $pass;
    $edit['pass[pass2]'] = $pass;
    $edit['status'] = 1;
    $this->drupalPost('admin/people/create', $edit, t('Create new account'));
    $this->assertResponse(200);
    // Retrieve user object.
    $user = user_load_by_name($name);
    $this->assertTrue($user != NULL, t('User @name was loaded', array('@name' => $name)));
    $user->pass_raw = $pass; // Needed by drupalLogin.
    // Login user.
    $this->drupalLogin($user);
    // Logout user.
    $this->drupalLogout();
    // Fetch row ids in watchdog that relate to the user.
    $collection = mongodb_collection(variable_get('mongodb_watchdog', 'watchdog'));
    $query = array('uid' => $user->uid);
    $result = $collection->find($query, array('_id' => 1));
    foreach ($result as $row) {
      $ids[] = $row['_id'];
    }
    $count_before = (isset($ids)) ? count($ids) : 0;
    $this->assertTrue($count_before > 0, t('DBLog contains @count records for @name', array('@count' => $count_before, '@name' => $user->name)));

    // Login the admin user.
    $this->drupalLogin($this->big_user);

    // On D6, delete user. On D7, cancel it.
    // We need to POST here to invoke batch_process() in the internal browser.
    $this->drupalPost('user/' . $user->uid . '/cancel', array('user_cancel_method' => 'user_cancel_reassign'), t('Cancel account'));

    // Count rows that have uids for the user.
    $count = $collection->find($query)->count();
    $this->assertTrue($count == 0, t('DBLog contains @count records for @name', array('@count' => $count, '@name' => $user->name)));

    // Count rows in watchdog that previously related to the deleted user.
    if (!empty($ids)) {
      $query['_id']['$in'] = $ids;
    }
    $count_after = $collection->find($query)->count();
    $this->assertTrue($count_after == $count_before, t('DBLog contains @count records for @name that now have uid = 0', array('@count' => $count_before, '@name' => $user->name)));
    unset($ids);
    // Fetch row ids in watchdog that relate to the user.
    $result = $collection->find($query, array('_id' => 1));
    foreach ($result as $row) {
      $ids[] = $row->wid;
    }
    $this->assertTrue(!isset($ids), t('DBLog contains no records for @name', array('@name' => $user->name)));

    // View the dblog report.
    $this->drupalGet('admin/reports/dblog');
    $this->assertResponse(200);

    // Verify events were recorded.
    // Add user.
    // Default display includes name and email address; if too long then email is replaced by three periods.
    // $this->assertRaw(t('New user: %name (%mail)', array('%name' => $edit['name'], '%mail' => $edit['mail'])), t('DBLog event was recorded: [add user]'));
    $this->assertRaw(t('New user: %name', array('%name' => $name)), t('DBLog event was recorded: [add user]'));
    // Login user.
    $this->assertRaw(t('Session opened for %name', array('%name' => $name)), t('DBLog event was recorded: [login user]'));
    // Logout user.
    $this->assertRaw(t('Session closed for %name', array('%name' => $name)), t('DBLog event was recorded: [logout user]'));
    // Delete user.
    $this->assertRaw(t('Deleted user: %name', array('%name' => $name)), t('DBLog event was recorded: [delete user]'));
  }

  /**
   * Generate and verify node events.
   *
   * @param string $type Content type.
   */
  private function doNode($type) {
    // Create user.
    $perm = array('create ' . $type . ' content', 'edit own ' . $type . ' content', 'delete own ' . $type . ' content');
    $user = $this->drupalCreateUser($perm);
    // Login user.
    $this->drupalLogin($user);

    // Create node using form to generate add content event (which is not triggered by drupalCreateNode).
    $edit = $this->getContent($type);

    $langcode = LANGUAGE_NONE;
    $title = $edit["title[$langcode][0][value]"];

    $this->drupalPost('node/add/' . $type, $edit, t('Save'));
    $this->assertResponse(200);
    // Retrieve node object.
    $node = $this->drupalGetNodeByTitle($title);
    $this->assertTrue($node != NULL, t('Node @title was loaded', array('@title' => $title)));
    // Edit node.
    $edit = $this->getContentUpdate($type);
    $this->drupalPost('node/' . $node->nid . '/edit', $edit, t('Save'));
    $this->assertResponse(200);
    // Delete node.
    $this->drupalPost('node/' . $node->nid . '/delete', array(), t('Delete'));
    $this->assertResponse(200);
    // View node (to generate page not found event).
    $this->drupalGet('node/' . $node->nid);
    $this->assertResponse(404);
    // View the dblog report (to generate access denied event).
    $this->drupalGet('admin/reports/dblog');
    $this->assertResponse(403);

    // Login the admin user.
    $this->drupalLogin($this->big_user);
    // View the dblog report.
    $this->drupalGet('admin/reports/dblog');
    $this->assertResponse(200);

    // Verify events were recorded.
    // Content added.
    $this->assertRaw(t('@type: added %title', array('@type' => $type, '%title' => $title)), t('DBLog event was recorded: [content added]'));
    // Content updated.
    $this->assertRaw(t('@type: updated %title', array('@type' => $type, '%title' => $title)), t('DBLog event was recorded: [content updated]'));
    // Content deleted.
    $this->assertRaw(t('@type: deleted %title', array('@type' => $type, '%title' => $title)), t('DBLog event was recorded: [content deleted]'));

    // View dblog access-denied report node.
    $this->drupalGet('admin/reports/access-denied');
    $this->assertResponse(200);
    // Access denied.
    $this->assertText(t('admin/reports/dblog'), t('DBLog event was recorded: [access denied]'));

    // View dblog page-not-found report node.
    $this->drupalGet('admin/reports/page-not-found');
    $this->assertResponse(200);
    // Page not found.
    $this->assertText(t('node/@nid', array('@nid' => $node->nid)), t('DBLog event was recorded: [page not found]'));
  }

  /**
   * Create content based on content type.
   *
   * @param string $type Content type.
   * @return array Content.
   */
  private function getContent($type) {
    $langcode = LANGUAGE_NONE;
    switch ($type) {
      case 'poll':
        $content = array(
          "title[$langcode][0][value]" => $this->randomName(8),
          'choice[new:0][chtext]' => $this->randomName(32),
          'choice[new:1][chtext]' => $this->randomName(32),
        );
      break;

      default:
        $content = array(
          "title[$langcode][0][value]" => $this->randomName(8),
          "body[$langcode][0][value]" => $this->randomName(32),
        );
      break;
    }
    return $content;
  }

  /**
   * Create content update based on content type.
   *
   * @param string $type Content type.
   * @return array Content.
   */
  private function getContentUpdate($type) {
    switch ($type) {
      case 'poll':
        $content = array(
          'choice[chid:1][chtext]' => $this->randomName(32),
          'choice[chid:2][chtext]' => $this->randomName(32),
        );
      break;

      default:
        $langcode = LANGUAGE_NONE;
        $content = array(
          "body[$langcode][0][value]" => $this->randomName(32),
        );
      break;
    }
    return $content;
  }

  /**
   * Login an admin user, create dblog event, and test clearing dblog functionality through the admin interface.
   */
  protected function ZtestDBLogAddAndClear() {
    global $base_root;
    // Get a count of how many watchdog entries there are.
    $count = db_query('SELECT COUNT(*) FROM {watchdog}')->fetchField();
    $log = array(
      'type'        => 'custom',
      'message'     => 'Log entry added to test the doClearTest clear down.',
      'variables'   => array(),
      'severity'    => WATCHDOG_NOTICE,
      'link'        => NULL,
      'user'        => $this->big_user,
      'request_uri' => $base_root . request_uri(),
      'referer'     => $_SERVER['HTTP_REFERER'],
      'ip'          => ip_address(),
      'timestamp'   => $this->request_time,
    );
    // Add a watchdog entry.
    dblog_watchdog($log);
    // Make sure the table count has actually incremented.
    $this->assertEqual($count + 1, db_query('SELECT COUNT(*) FROM {watchdog}')->fetchField(), t('dblog_watchdog() added an entry to the dblog :count', array(':count' => $count)));
    // Login the admin user.
    $this->drupalLogin($this->big_user);
    // Now post to clear the db table.
    $this->drupalPost('admin/reports/dblog', array(), t('Clear log messages'));
    // Count rows in watchdog that previously related to the deleted user.
    $count = db_query('SELECT COUNT(*) FROM {watchdog}')->fetchField();
    $this->assertEqual($count, 0, t('DBLog contains :count records after a clear.', array(':count' => $count)));
  }

  /**
   * Test the dblog filter on admin/reports/dblog.
   */
  protected function ZtestFilter() {
    $this->drupalLogin($this->big_user);

    // Clear log to ensure that only generated entries are found.
    db_delete('watchdog')->execute();

    // Generate watchdog entries.
    $type_names = array();
    $types = array();
    for ($i = 0; $i < 3; $i++) {
      $type_names[] = $type_name = $this->randomName();
      $severity = WATCHDOG_EMERGENCY;
      for ($j = 0; $j < 3; $j++) {
        $types[] = $type = array(
          'count' => mt_rand(1, 5),
          'type' => $type_name,
          'severity' => $severity++,
        );
        $this->generateLogEntries($type['count'], $type['type'], $type['severity']);
      }
    }

    // View the dblog.
    $this->drupalGet('admin/reports/dblog');

    // Confirm all the entries are displayed.
    $count = $this->getTypeCount($types);
    foreach ($types as $key => $type) {
      $this->assertEqual($count[$key], $type['count'], 'Count matched');
    }

    // Filter by each type and confirm that entries with various severities are
    // displayed.
    foreach ($type_names as $type_name) {
      $edit = array(
        'type[]' => array($type_name),
      );
      $this->drupalPost(NULL, $edit, t('Filter'));

      // Count the number of entries of this type.
      $type_count = 0;
      foreach ($types as $type) {
        if ($type['type'] == $type_name) {
          $type_count += $type['count'];
        }
      }

      $count = $this->getTypeCount($types);
      $this->assertEqual(array_sum($count), $type_count, 'Count matched');
    }

    // Set filter to match each of the three type attributes and confirm the
    // number of entries displayed.
    foreach ($types as $key => $type) {
      $edit = array(
        'type[]' => array($type['type']),
        'severity[]' => array($type['severity']),
      );
      $this->drupalPost(NULL, $edit, t('Filter'));

      $count = $this->getTypeCount($types);
      $this->assertEqual(array_sum($count), $type['count'], 'Count matched');
    }
  }

  /**
   * Get the log entry information form the page.
   *
   * @return
   *   List of entries and their information.
   */
  protected function getLogEntries() {
    $entries = array();
    if ($table = $this->xpath('.//table[@id="admin-dblog"]')) {
      $table = array_shift($table);
      foreach ($table->tbody->tr as $row) {
        $entries[] = array(
          'severity' => $this->getSeverityConstant($row['class']),
          'type' => $this->asText($row->td[1]),
          'message' => $this->asText($row->td[3]),
          'user' => $this->asText($row->td[4]),
        );
      }
    }
    return $entries;
  }

  /**
   * Get the count of entries per type.
   *
   * @param $types
   *   The type information to compare against.
   * @return
   *   The count of each type keyed by the key of the $types array.
   */
  protected function getTypeCount(array $types) {
    $entries = $this->getLogEntries();
    $count = array_fill(0, count($types), 0);
    foreach ($entries as $entry) {
      foreach ($types as $key => $type) {
        if ($entry['type'] == $type['type'] && $entry['severity'] == $type['severity']) {
          $count[$key]++;
          break;
        }
      }
    }
    return $count;
  }

  /**
   * Get the watchdog severity constant corresponding to the CSS class.
   *
   * @param $class
   *   CSS class attribute.
   * @return
   *   The watchdog severity constant or NULL if not found.
   */
  protected function getSeverityConstant($class) {
    // Reversed array from dblog_overview().
    $map = array(
      'dblog-debug' => WATCHDOG_DEBUG,
      'dblog-info' => WATCHDOG_INFO,
      'dblog-notice' => WATCHDOG_NOTICE,
      'dblog-warning' => WATCHDOG_WARNING,
      'dblog-error' => WATCHDOG_ERROR,
      'dblog-critical' => WATCHDOG_CRITICAL,
      'dblog-alert' => WATCHDOG_ALERT,
      'dblog-emerg' => WATCHDOG_EMERGENCY,
    );

    // Find the class that contains the severity.
    $classes = explode(' ', $class);
    foreach ($classes as $class) {
      if (isset($map[$class])) {
        return $map[$class];
      }
    }
    return NULL;
  }

  /**
   * Extract the text contained by the element.
   *
   * @param $element
   *   Element to extract text from.
   * @return
   *   Extracted text.
   */
  protected function asText(SimpleXMLElement $element) {
    if (!is_object($element)) {
      return $this->fail('The element is not an element.');
    }
    return trim(html_entity_decode(strip_tags($element->asXML())));
  }
}
