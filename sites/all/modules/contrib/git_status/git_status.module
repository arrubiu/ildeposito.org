<?php

/**
 * @file
 * Provides some information of a git repository.
 *
 * The way commands are executed has been borrowed/adapted from the Imagemagick module,
 * and has proven to be reliable and fault-tolerant on multiple platforms.
 */

/**
 * Implements hook_requirements().
 *
 * Shows the information in the Status Report page.
 */
function git_status_requirements($phase) {

  $requirements = array();

  if ($phase == 'runtime') {

    // Get IP. See http://stackoverflow.com/a/5350310/1391963
    if (!empty($_SERVER["HTTP_X_FORWARDED_FOR"])) {
      $ip    = $_SERVER["HTTP_X_FORWARDED_FOR"];
      $proxy = "Proxy: " . $_SERVER["REMOTE_ADDR"];
    }
    else {
      $ip    = $_SERVER["REMOTE_ADDR"];
      $proxy = t("No proxy detected");
    }

    $requirements['server_ip'] = array(
      'title'    => t('Server IP'),
      'value'    => "$ip ($proxy)",
      'severity' => REQUIREMENT_OK,
      'weight'   => -7,
    );

    $uname = @php_uname();
    $requirements['server_name'] = array(
      'title'    => t('Server'),
      'value'    => strlen($uname) > 0 ? $uname : t('Notice: Could not use php_uname()'),
      'severity' => strlen($uname) > 0 ? REQUIREMENT_OK : REQUIREMENT_INFO,
      'weight'   => -7,
    );

    git_status_exec('--version', $version, $error);
    $requirements['git_version'] = array(
      'title'    => t('Git version'),
      'value'    => $error ? t('Error executing git.') : str_replace('git version ', '', $version),
      'severity' => $error ? REQUIREMENT_ERROR : REQUIREMENT_OK,
      'weight'   => -1,
    );

    if (!$error) {
      git_status_exec('rev-parse --abbrev-ref HEAD', $branch, $error);
      $requirements['git_branch'] = array(
        'title'    => t('Git current branch'),
        'value'    => $branch,
        'severity' => $error ? REQUIREMENT_ERROR : REQUIREMENT_OK,
        'weight'   => -6,
      );

      git_status_exec('status', $status, $error);
      $severity = $error ? REQUIREMENT_ERROR : REQUIREMENT_INFO;
      if (strpos($status, 'working directory clean')) {
        $severity = REQUIREMENT_OK;
      }
      $requirements['git_status'] = array(
        'title'    => t('Git status'),
        'value'    => '<pre>' . htmlentities($status) . '</pre>',
        'severity' => $severity,
        'weight'   => -2,
      );

      if (!$error) {
        git_status_exec('log -1 --pretty=format:"%an"', $author, $error1);
        git_status_exec('log -1 --pretty=format:"%s"', $summary, $error2);
        git_status_exec('log -1 --pretty=format:"%ad"', $date, $error3);

        $error = $error1 || $error2 || $error3;
        $requirements['git_last_commit'] = array(
          'title'    => t('Git last commit'),
          'value'    => $error ? t('Error when running git log.') : "$author | <b>" . htmlentities($summary) . "</b> ($date)",
          'severity' => $error ? REQUIREMENT_ERROR : REQUIREMENT_OK,
          'weight'   => -5,
        );

        git_status_exec('log -1 --pretty=format:"%H"', $commit_id, $error);
        $requirements['git_last_commit_id'] = array(
          'title'    => t('Git last commit ID'),
          'value'    => $commit_id,
          'severity' => $error ? REQUIREMENT_ERROR : REQUIREMENT_OK,
          'weight'   => -4,
        );

        git_status_exec("describe --tag", $tag, $error);
        $requirements['git_tag'] = array(
          'title'    => t('Git tag'),
          'value'    => $tag,
          'severity' => $error ? REQUIREMENT_ERROR : REQUIREMENT_OK,
          'weight'   => -3,
        );
      }
    }
  }
  return $requirements;
}


/**
 * Verifies file path of the git binary by checking its version.
 *
 * @param $file
 *   The user-submitted file path to the git binary.
 *
 * @return
 *   An associative array containing:
 *   - output: The shell output of 'git --version', if any.
 *   - errors: A list of error messages indicating whether git could not
 *     be found or executed.
 */
function git_status_check_path($file) {
  $status = array(
    'output' => '',
    'errors' => array(),
  );

  // If only the name of the executable is given, we only check whether it is in
  // the path and can be invoked.
  if ($file != 'git') {

    // Check whether the given file exists.
    if (!is_file($file)) {
      $status['errors'][] = t('The specified git file path %file does not exist.', array('%file' => $file));
    }

    // If it exists, check whether we can execute it.
    elseif (!is_executable($file)) {
      $status['errors'][] = t('The specified git file path %file is not executable.', array('%file' => $file));
    }
  }

  // Unless we had errors so far, try to invoke git.
  if (!$status['errors']) {
    git_status_exec('--version', $output, $error, $file);
    $status['output'] = $output;

    // git_convert_exec() triggers a user error upon failure, but
    // during form validation all errors need to be reported.
    if ($error !== '') {

      // $error normally needs check_plain(), but file system errors on Windows
      // use a unknown encoding. check_plain() would eliminate the entire string.
      $status['errors'][] = $error;
    }
  }

  return $status;
}


/**
 * Executes the git executable as shell command.
 *
 * @param $command_args
 *   A string containing arguments to pass to the git command, which must
 *   have been passed through escapeshellarg() already.
 * @param &$output
 *   (optional) A variable to assign the shell stdout to, passed by reference.
 * @param &$error
 *   (optional) A variable to assign the shell stderr to, passed by reference.
 * @param $git_path
 *   (optional) A custom file path to the git binary. Internal use only.
 *
 * @return mixed
 *   The return value depends on the shell command result:
 *   - Boolean TRUE if the command succeeded.
 *   - Boolean FALSE if the shell process could not be executed.
 *   - Error exit status code integer returned by the executable.
 */
function git_status_exec($command_args, &$output = '', &$error = '', $git_path = '') {

  $output = $error = '';

  // $git_path is only passed from the settings form.
  // @see git_status_check_path()
  if (!$git_path) {
    $git_path = variable_get('git_status_git', 'git');
  }

  // Use Drupal's root as working directory to resolve relative paths correctly.
  $drupal_path = DRUPAL_ROOT;

  if (strstr($_SERVER['SERVER_SOFTWARE'], 'Win32') || strstr($_SERVER['SERVER_SOFTWARE'], 'IIS')) {

    // Use Window's start command with the /B flag to make the process run in
    // the background and avoid a shell command line window from showing up.
    // @see http://us3.php.net/manual/en/function.exec.php#56599
    // Use /D to run the command from PHP's current working directory so the
    // file paths don't have to be absolute.
    $git_path = 'start "git" /D ' . escapeshellarg($drupal_path) . ' /B ' . escapeshellarg($git_path);
  }
  $command = $git_path . ' ' . $command_args;

  $descriptors = array(
    // stdin
    0 => array('pipe', 'r'),
    // stdout
    1 => array('pipe', 'w'),
    // stderr
    2 => array('pipe', 'w'),
  );
  if ($h = proc_open($command, $descriptors, $pipes, $drupal_path)) {
    while (!feof($pipes[1])) {
      $output .= fgets($pipes[1]);
    }
    while (!feof($pipes[2])) {
      $error .= fgets($pipes[2]);
    }

    fclose($pipes[0]);
    fclose($pipes[1]);
    fclose($pipes[2]);
    $return_code = proc_close($h);

    // If git returned a non-zero code, trigger a PHP error that will
    // be caught by Drupal's error handler, logged to the watchdog and
    // eventually displayed to the user if configured to do so.
    if ($return_code != 0) {

      // If there is no error message, clarify this.
      if ($error === '') {
        $error = t('No error message.');
      }

      // Format $error with as full message, passed by reference.
      $error = t('git error @code: !error', array(
        '@code' => $return_code,
        '!error' => $error,
      ));
      trigger_error($error, E_USER_ERROR);

      // git exited with an error code, return it.
      return $return_code;
    }

    // The shell command was executed successfully.
    return TRUE;
  }

  // The shell command could not be executed.
  return FALSE;
}
