<?php

/**
 * @file
 */

/**
 * Implements hook_menu
 * @return array
 */
function elenchi_menu() {
	$items['prova/archivio'] = array(
			'page callback' => 'elenchi_contenuti_callback',
			'title' => 'Eccolo!',
			'type' => MENU_NORMAL_ITEM,
			'access arguments' => array('access content'),
	);

	$items['prova/json/eventi'] = array(
			'page callback' => 'json_eventi',
			'type' => MENU_CALLBACK,
			'access arguments' => array('access content'),
	);
	
	$items['admin/batch'] = array(
    'title' => 'Demo Batches',
    'description' => 'Run batch operations.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('elenchi_form'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
   );
	return $items;
}

/**
 * Implementation of hook_menu_alter(). 
 */
function elenchi_menu_alter(&$items) {
	$items['taxonomy/term/%taxonomy_term']['page callback'] = 'elenchi_taxonomy_term_page';
	$items['taxonomy/term/%taxonomy_term']['page arguments'] = array(2);
}

/**
 * Restituisce il nome macchina in base al valore
 * @param type $type
 * @param type $value
 */
function elenchi_get_relation($type, $value) {
	$values = array(
			'contenuto' => array(
					'canto' => 'canti',
			),
			'vocabolario' => array(
					'field_sezione' => 'sezioni',
			),
			'facet' => array(
					'zIH8EsYFkvWKeMtTZTGLEm1GrYlAarmk' => 'tipo_contenuto',
					'12345' => 'localizzazione',
					'12345' => 'sezione',
					'12345' => 'tags',
					'12345' => 'lingua',
					'0Pau1GV8D8QAAmzOG638DhV06AjWM6yp' => 'presenza_accordi',
			),
	);

	return array_search($value, $values[$type]);
}

/**
 * Callback per la generazione della pagina con l'elenco
 */
function elenchi_contenuti_callback($term = NULL) {
	$menu_item = menu_get_item();

	// Impostazioni per i termini di tassonomia
	if ($menu_item['page_callback'] == 'elenchi_taxonomy_term_page') {
		$search = elenchi_search_solr('vocabolario', $term);
		$header = '<div class="term-description">' . $term->description . '</div>';
		metatag_entity_view($term, 'taxonomy_term', 'full', NULL);
	}

	// Impostazioni per le pagine custom
	else {
		$tipo_contenuto = arg(1);
		$search = elenchi_search_solr('contenuto', $tipo_contenuto);
		$header = 'Descrizione della pagina custom';
	}

	$facets = elenchi_get_facet_block(array('tipo_contenuto', 'presenza_accordi'));

	$theme = theme(
					'elenchi', array(
			'contents' => $search['contents'],
			'pager' => $search['pager'],
			'header' => $header,
			'facet' => $facets,
					)
	);
	return $theme;
}

/**
 * Implements hook_theme.
 */
function elenchi_theme() {
	$elements = array(
			'elenchi' => array(
					'variables' => array(
							'contents' => NULL,
							'pager' => NULL,
							'facet' => NULL,
							'header' => NULL,
					),
					'template' => 'elenchi',
			),
	);
	return $elements;
}

/**
 * Ricerca solr 
 */
function elenchi_search_solr($type, $value) {

	global $user, $pager_page_array, $pager_total;
	$page = isset($_GET['page']) ? $_GET['page'] : 0;
	$items_per_page = 10;

	try {
		$index = search_api_index_load('default_node_index');
		$query = new SearchApiQuery($index);

		switch ($type) {
			case 'contenuto':
				$field_to_search = elenchi_get_relation('contenuto', $value);
				$query->condition('type', $field_to_search);
				break;

			case 'vocabolario':
				$field_to_search = elenchi_get_relation('vocabolario', $value->vocabulary_machine_name);
				$query->condition($field_to_search, $value->tid);
		}

		/* if (isset($_GET['keywrds'])) {
		  $query->keys($_GET['keywords']);
		  } */

		$filter = new SearchApiQueryFilter();
		$filter->condition('status', 1);
		$query->filter($filter);
		$query->setOption('offset', ($page * $items_per_page));
		$query->setOption('limit', $items_per_page);
		$query->sort('search_api_aggregation_1', 'ASC');

		$data = $query->execute();
		$pager_total = array(
				0 => ceil($data['result count'] / $items_per_page),
		);
		$pager_page_array = array(
				0 => $page,
		);
		$search['contents'] = '';
		foreach ($data['results'] as $node) {
			$search['contents'] .= $node['fields']['search_api_viewed'][0];
		}

		$search['pager'] = theme('pager');
	} catch (Exception $e) {
		$output = '';
	}

	return $search;
}

/**
 * Callback pagina tassonomia
 */
function elenchi_taxonomy_term_page($term) {
	switch ($term->vocabulary_machine_name) {
		case 'sezioni':
			return elenchi_contenuti_callback($term);
		default:
			module_load_include('inc', 'taxonomy', 'taxonomy.pages');
			return taxonomy_term_page($tid);
	}
}

/**
 * Restituisce l'html di un blocco facet in base all'id
 * @param type $facet_id
 */
function elenchi_get_facet_block($facets_id) {
	foreach ($facets_id as $facet_id) {
		$facet_block = module_invoke('facetapi', 'block_view', elenchi_get_relation('facet', $facet_id));
	}
}

/**
 * Restituisce il json per la timeline
 */
function json_eventi() {
	$array = array(
			'timeline' => array(
					'headline' => 'Sh*t People Say',
					'type' => 'default',
					'text' => 'People say stuff',
					'startDate' => '2012,1,26',
					'date' => array(
							array(
									'startDate' => '2012,1,26',
									'headline' => 'Sh*t Politicians Say',
									'text' => '<p>In true political fashion, his character rattles off common jargon heard from people running for office.</p>',
									'asset' => array(
											'media' => 'http://youtu.be/u4XpeU9erbg',
											'credit' => 'prova credit',
											'caption' => 'prova caption',
									),
							),
							array(
									'startDate' => '2012,1,30',
									'headline' => 'Sh*t Politicians Say 2',
									'text' => '<p>2 In true political fashion, his character rattles off common jargon heard from people running for office.</p>',
									'asset' => array(
											'media' => 'http://youtu.be/u4XpeU9erbg',
											'credit' => '2 prova credit',
											'caption' => ' 2prova caption',
									),
							),
					),
			),
	);

	print json_encode($array);
}

function elenchi_form(){
  $form = array();
  $form['submit'] = array('#type' => 'submit', '#value' => t('Aggiorna le operazioni'));
	$form['foo'] = array(
    '#type' => 'submit',
    '#value' => t('Aggiorna i pagamenti'),
    '#submit' => array('submit_custom'),
  );
  return $form;
}

function elenchi_form_submit($form, $form_state){
  batch_set(elenchi_build_batch());
}

function submit_custom($form, $form_state){
	drupal_set_message('ciao');
	
}

function elenchi_build_batch(){
  // Here we can add multiple operation using an array variable.
	$nodes = node_load_multiple(array(), array('type' => "traduzione"));
	$node_count = count($nodes);
	foreach($nodes as $nid=>$node) {
    // $operations[] = array(<function name>, <array of arguments to pass to function>);
    $operations[] = array('elenchi_batch_title', array($node));
  }
	

  // build the batch instructions
  $batch = array(
    'operations' => $operations,
    'finished' => 'elenchi_batch_title_finished',
  );
  return $batch;
}

/**
* Batch operation: associate audio tiles to 1 node.
* This is the function that is called on each operation in the above.
*/
function elenchi_batch_title($node, &$context) {
  $context['results'][] = $node->nid . ' : ' . check_plain($node->title);
  // Optional message displayed under the progressbar.
  $context['message'] = t('Processing traduzione "@title"', array('@title' => $node->title));
  $updated = FALSE;
  // .... do the actual work - code removed in this example
  if ($updated) {
    //node_save($node);
    $path = drupal_lookup_path("alias", "node/" . $node->nid);
    drupal_set_message("<a href='/$path'>" . $node->title . "</a> updated.");
  }
}

function elenchi_batch_title_finished($success, $results, $operations) {
  if ($success) {
    // Here we could do something meaningful with the results.
    // We just display the number of nodes we processed...
    drupal_set_message(t('@count traduzioni processate.', array('@count' => count($results))));
  } else {
    // An error occurred.
    // $operations contains the operations that remained unprocessed.
    $error_operation = reset($operations);
    drupal_set_message(t('An error occurred while processing @operation with arguments : @args', array('@operation' => $error_operation[0], '@args' => print_r($error_operation[0], TRUE))));
  }
}