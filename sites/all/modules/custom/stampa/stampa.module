<?php

/**
 * @file
 * Gestione stampa per ilDeposito.org
 */

/**
 * Implements hook_menu
 * @return array
 */
function stampa_menu() {
	$items['stampa/canto/%'] = array(
			'page callback' => 'stampa_canto',
			'page arguments' => array(2),
			'type' => MENU_CALLBACK,
			'access arguments' => array('access content'),
	);
	return $items;
}

/**
 * Stampa PDF cantno
 * @param type $node
 */
function stampa_canto($nid) {
	$node = node_load($nid);
	if ($node && $node->type == 'canto') {

		require DRUPAL_ROOT . '/sites/all/libraries/mpdf/mpdf.php';
		module_load_include('inc', 'pathauto', 'pathauto');
		$filename = $node->nid . '-' . pathauto_cleanstring($node->title) . '.pdf';

		// Aggiungere controllo su esistenza file
		$file = stampa_check_file_pdf($filename);
		if ($file) {
			$file_url = $file->uri; 
			header('Content-Type: application/octet-stream');
			header('Content-Disposition: attachment; filename="' . $filename . '"');
			//header('Content-Length: ' . filesize($file_url));
			readfile($file_url);
			exit;
			#drupal_goto(file_create_url($file->uri));
		} else {

			$mpdf = new mPDF('it-IT', 'A4', 9, 'dejavusans');
			$stylesheet = file_get_contents(token_replace('[site:url]') . '/sites/all/modules/developer/modules/stampa/stampa.css');
			$mpdf->WriteHTML($stylesheet, 1);
			$mpdf->SetTitle($canto['titolo'] . ' - ilDeposito.org');
			$mpdf->SetHeader('|ilDeposito.org - Canti di protesta politica e sociale |');
			$mpdf->SetFooter('|pagina {PAGENO}|');
			$mpdf = stampa_get_canto($mpdf, $node);

			// Aggiungere creazione file e redirect su file creato
			$mpdf->Output(DRUPAL_ROOT . '/sites/default/files/pdf_cache/' . $filename, 'F');
			$uri = 'public://pdf_cache/' . $filename;
			$file = new stdClass;
			$file->uid = $GLOBALS['user']->uid;
			$file->filename = $filename;
			$file->uri = $uri;
			$file->filemime = 'application/pdf';
			$file->filesize = filesize($uri);
			$file->status = 1;
			file_save($file);

			// Redirigo al file
			$file_url = $file->uri;
                        header('Content-Type: application/octet-stream');
                        header('Content-Disposition: attachment; filename="' . $filename . '"');
                        //header('Content-Length: ' . filesize($file_url));
                        readfile($file_url);


			#drupal_goto(file_create_url($file->uri));


		}
	}
}

/**
 * Aggiunge gli elemtni al pdf per il canto
 * @param type $canto
 */
function stampa_get_canto($mpdf, $node) {
	$canto['titolo'] = $node->title;
	if (isset($node->field_accordi['und'][0]['value']) && $node->field_accordi['und'][0]['value'] != '') {
		$canto['testo'] = $node->field_accordi['und'][0]['value'];
	} else {
		$canto['testo'] = $node->field_testo['und'][0]['value'];
	}
	$canto['autori_testo'] = token_replace('[node:field-autore-testo]', array('node' => $node));
	$canto['autori_musica'] = token_replace('[node:field-autore-musica]', array('node' => $node));
	$canto['sezione'] = token_replace('[node:field-sezione]', array('node' => $node));
	$canto['tags'] = token_replace('[node:field-tags]', array('node' => $node));
	$canto['anno'] = token_replace('[node:field-anno:solo_anno]', array('node' => $node));
	$canto['lingua'] = token_replace('[node:field-lingua]', array('node' => $node));
	$canto['info'] = token_replace('[node:field-informazioni:value]', array('node' => $node));

	/* titolo */
	$mpdf->WriteHTML('<h2 class="center canto-titolo">' . $canto['titolo'] . '</h2>');

	/* contenuto */
	$mpdf->WriteHTML('<div class="small">', 2, true, false);
	$mpdf->WriteHTML('<div class="center">', 2, true, false);
	if ($canto['autori_testo']) {
		$mpdf->WriteHTML('di ' . $canto['autori_testo'] . ' ', 2, false, false);
	}

	if ($canto['anno']) {
		$mpdf->WriteHTML(' (' . $canto['anno'] . ')', 2, false, false);
	}
	$mpdf->WriteHTML('</div>', 2, false, true);
	$mpdf->WriteHTML('<div class="center">Sezione: ' . $canto['sezione'] . '</div>', 2);
	$mpdf->WriteHTML('<div class="center margin-bottom">Lingua: ' . $canto['lingua'] . ' ', 2, true, false);

	if ($canto['tags']) {
		$mpdf->WriteHTML(' - Tags: ' . $canto['tags'], 2, false, false);
	}
	$mpdf->WriteHTML('</div>', 2, false, true);
	$mpdf->WriteHTML('</div>', 2, false, true);
	$mpdf->SetColumns(2, BLANK);
	$mpdf->WriteHTML('<div class="testo"><pre>' . $canto['testo'] . '</pre></div>');
	$mpdf->SetColumns(1);
	if ($canto['info'] != '[node:field-informazioni:value]') {
		$mpdf->WriteHTML('<h3 class="info">Informazioni</h2>');
		$mpdf->WriteHTML($canto['info']);
	}

	return $mpdf;
}

/**
 * Verifica se il file esiste giÃ 
 * @param type $filename
 */
function stampa_check_file_pdf($filename) {
	// Restituisce il file se lo trova,
	// altrimenti restituisce falso
	$query = new EntityFieldQuery();
	$query->entityCondition('entity_type', 'file')
					->propertyCondition('filename', $filename, '=');
	$result = $query->execute();
	if (isset($result['file'])) {
		$fid = array_keys($result['file']);
		return file_load($fid[0]);
	} else {
		return FALSE;
	}
}

/**
 * Implements hook_node_update
 * Pulizia del file pdf dopo aggiornamento nodo
 * @param type $node
 */
function stampa_node_update($node) {
	if ($node->type == 'canto') {
		module_load_include('inc', 'pathauto', 'pathauto');
		$filename = $node->nid . '-' . pathauto_cleanstring($node->title) . '.pdf';
		$file = stampa_check_file_pdf($filename);
		if ($file) {
			file_delete($file);
		}
	}
}

/**
 * Implements hook_node_delete
 * @param type $node
 */
function stampa_node_delete($node) {
	if ($node->type == 'canto') {
		module_load_include('inc', 'pathauto', 'pathauto');
		$filename = $node->nid . '-' . pathauto_cleanstring($node->title) . '.pdf';
		$file = stampa_check_file_pdf($filename);
		if ($file) {
			file_delete($file);
		}
	}
}
